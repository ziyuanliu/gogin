pid         logs/nginx.pid;
error_log   logs/nginx-main_error.log debug;

# Development Mode
master_process      off;
daemon              off;
worker_rlimit_core  2500M;
working_directory /tmp;
debug_points abort;
worker_rlimit_nofile 65535;
worker_processes    2;

events {
    worker_connections  30000;
    use                 kqueue;
}

http {
    access_log      logs/nginx-http_access.log;
    lingering_time 5s;
    lingering_timeout 1s;
    client_header_timeout 5s;
    tcp_nodelay on;
    tcp_nopush off;
    reset_timedout_connection on;
    send_timeout 9s;


    push_stream_shared_memory_size                100m;
    push_stream_max_channel_id_length             200;
    # max messages to store in memory
    push_stream_max_messages_stored_per_channel   1;
    # message ttl
    push_stream_message_ttl                       5m;
    # ping frequency
    push_stream_ping_message_interval             10s;
    # connection ttl to enable recycle
    push_stream_subscriber_connection_ttl         90s;
    # connection ttl for long polling
    push_stream_longpolling_connection_ttl        30s;
    push_stream_timeout_with_body                 off;

    # wildcard
    push_stream_wildcard_channel_prefix         "broad_";
    push_stream_wildcard_channel_max_qtd        3;

    push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\", \"tag\":\"~tag~\", \"time\":\"~time~\", \"eventid\":\"~event-id~\"}";

    # subscriber may create channels on demand or only authorized (publisher) may do it?
    push_stream_authorized_channels_only        off;

    push_stream_allowed_origins                 "*";

    server {
        listen           5000 default_server;
        #listen          9443 ssl;
        #ssl_certificate     /usr/local/nginx/ssl/server.crt;
        #ssl_certificate_key /usr/local/nginx/ssl/server.key;
        server_name     localhost;
        location /channels-stats {
                # activate channels statistics mode for this location
                push_stream_channels_statistics;

                # query string based channel id
                push_stream_channels_path               $arg_id;
            }

        location /pub {
            #internal;
	        allow 127.0.0.1;
            deny all;
                        # activate publisher mode for this location, with admin support
            push_stream_publisher admin;

            # query string based channel id
            push_stream_channels_path               $arg_id;

            # store messages in memory
            # push_stream_store_messages              on;

            # Message size limit
            # client_max_body_size MUST be equal to client_body_buffer_size or
            # you will be sorry.
            client_max_body_size                    4k;
            client_body_buffer_size                 4k;
		error_log /usr/local/nginx/logs/updates_listen.log;
        }

        location /ws {
            #allow 127.0.0.1;
            #deny all;
            internal;
            # activate websocket mode for this location
            push_stream_subscriber websocket;

            # positional channel path
            push_stream_channels_path                   $arg_channels;
            # message template
            push_stream_message_template                 "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\"}";

            push_stream_websocket_allow_publish         on;

            # ping frequency
            push_stream_ping_message_interval           10s;
                error_log /usr/local/nginx/logs/ws_listen.log;
        }

        location /{
            root /Users/ziyuanliu/go/src/gogin/client;
        }

        location ~ /subscribe {
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #proxy_set_header Host $http_host;
            #proxy_redirect off;
            proxy_pass "http://localhost:8888";
        }

    }
}
